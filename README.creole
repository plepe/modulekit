== About ==
When starting new projects I always kept copying useful code from my last projects. Over time this started to annoy me as I always kept improving that shared code but usually didn't copy back. So I had copies of more or less the same code in different repositories.

As I'm a passionate user of Git for quite some time, I thought there must be a better way and finally I found the Git submodules. When starting to use those submodules I defined a structure to simplify sharing those modules between those projects - called 'modulekit'. I like to keep the modules small and simple.

The basic module is the repository you are looking at right now, which handles loading of modules, solving dependencies between the modules and some more general functions.

== Structure ==
Files/directories in every project/module:

* modulekit.php - Definition of the project/module, list of include files, dependencies.
* inc/ - Include files for this project or if loaded as a submodule
* modules/ - submodules this project uses
** base/ - for example the modulekit-base library
** form/ - or the modulekit-form library
* modulekit/ - this basic 'modulekit' submodule (the very code you are reading right now)

Therefore files in the root directory of the project/module will be ignored by modulekit; you can have example-code there and a README or the index.php of your project. It even allows you to use your project as submodule for another project.

== Work with the modulekit ==
=== Include 'modulekit' in your project ===
To start using modulekit, run the following commands. This clones the framework into the modulekit/-directory and the initializes the modules/-directory, where the submodules will be placed:
{{{
git submodule add https://github.com/plepe/modulekit.git modulekit
mkdir modules/
}}}

Create a modulekit.php-file:
{{{
<?php
$name="Name of this project/module";

// an ID to identify this module
$id="id";

// a version (see http://semver.org how to define versions)
// it will be inherited to submodules if they are in the same repository
$version="1.0.0";

// these modules should be loaded first
// * needs at least version 1.0 of module 'lang'
$depend=array("form", "lang"=>"1.0");

// these modules will also be loaded if this module is loaded, but
// (preferably) after this
$load=array("foo");

// these files will be included in this order:
$include=array();
$include['php']=array(
  "inc/file1.php",
  "inc/file2.php",
);
$include['js']=array(
  "inc/*.js",
);
$include['css']=array(
  "inc/a_css_file.css",
);
}}}

Example-code for an index.php-file:
{{{
<?php include "conf.php"; /* load a local configuration */ ?>
<?php include "modulekit/loader.php"; /* loads all php-includes */ ?>
<html>
  <head>
    <title>Framework Example</title>
    <?php print modulekit_to_javascript(); /* pass modulekit configuration to JavaScript */ ?>
    <?php print modulekit_include_js(); /* prints all js-includes */ ?>
    <?php print modulekit_include_css(); /* prints all css-includes */ ?>
  </head>
  <body>
  </body>
</html>
}}}

=== Notes ===
* Files included with $include may contain wildcards: e.g. *.php matches all files ending in .php .
** You can override the default $include setting by defining a $default_include, e.g. $default_include=array('foo'=>array("inc/*.foo")) which will be valid for all (child) modules not setting a $include setting
* You can define additional indexes for the $include (resp. $default_include) array. To load all files belonging to a specific index define a variable $modulekit_include_php with the index as value before including "modulekit/loader.php", resp. pass it as first argument to modulekit_include_js() resp. modulekit_include_css().
* You may define a variable $modulekit_load, which contains a list of modules to load (per default only those where a dependency of the main project is found will be loaded).

=== Adding additional submodules ===
If you want to add an additional submodule run the following commands:
{{{
git submodule add https://github.com/plepe/modulekit-form.git modules/form
git add .gitmodules modules/form
git commit
}}}

If a module depends on more submodules, you don't add them to the submodule's modules-directory, but to the modules directory of your project.

== Functions defined by 'modulekit' ==
=== modulekit_file($module, $path, [$absolute_path]) ===
Returns a relative (or absolute, if the third parameter is true) path to a file specified by $path. $module is either the id of the module itself or the id used by the project (the modules/**id**/-path).

* This function is also available in JavaScript, after calling "print modulekit_to_javascript()" 

Available: PHP/JS

=== modulekit_loaded($module) ===
Returns the definition from modulekit.php, if the given module is loaded.
Otherwise false.

Available: PHP/JS

=== modulekit_include_js($include_index="js", $suffix=null) ===
Returns a string with <script>-tags with all files listed in the
$include-arrays of all to-be-loaded modules with the $include_index-index. If
$include_index is missing or null, "js" will be used. $suffix will be appended
to the src-property, e.g. to force reloading after a software update. If
$suffix is null, it will be created from modulekit['version'].

Example: print modulekit_include_js(null, "?1f725ab");

Available: PHP

=== modulekit_include_css($include_index="css", $suffix=null) ===
Returns a string with <link rel='stylesheet'>-tags with all files listed in the
$include-arrays of all to-be-loaded modules with the $include_index-index. If
$include_index is missing or null, "js" will be used. $suffix will be appended
to the href-property, e.g. to force reloading after a software update. If
$suffix is null, it will be created from modulekit['version'].


Example: print modulekit_include_css(null, "?1f725ab");

Available: PHP

=== modulekit_get_includes($include_index) ===
Returns a list of all files listed in the $include-arrays with the $include_index-index.

Available: PHP/JS

=== modulekit_get_includes($module, $include_index [, $absolute_path] ) ===
Returns a list of all files listed in the $include-array of the specified module with the $include_index-index.

Available: PHP/JS

== Debugging ==
You may define a variable $modulekit_debug for debugging purposes. $modulekit_debug may take the following values:
* false/null/0/undefined: All debug information will be discarded.
* true: All debug information will be printed to stderr.
* a positive integer: Some debug information will be printed to stderr; the higher the value the more information you will get.
* a callable: All debug information will be passed to the user-defined function. It will be passed a text and the level of the debug message.

Debug messages printed to stderr by modulekit will be prepended by "modulekit(LX):" where X is the level of the message.

Set $modulekit_nocache to true before including loader.php to disable caching.
